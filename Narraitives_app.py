# -*- coding: utf-8 -*-
"""NarrAItives.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kZ8LyTHhebkXHORACgKKPOol0Sd-Rl1F
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install streamlit transformers torch newspaper3k beautifulsoup4 lxml requests lxml_html_clean

from transformers import pipeline

pipe = pipeline("zero-shot-classification", model="facebook/bart-large-mnli", token="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")

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# 
# import streamlit as st
# import os
# from newspaper import Article
# from transformers import pipeline
# import matplotlib.pyplot as plt
# import pandas as pd
# 
# # Set Hugging Face cache directory
# os.environ['HF_HOME'] = '/tmp/huggingface_cache'
# 
# # Set Hugging Face token directly (NOT RECOMMENDED FOR PRODUCTION)
# hf_token = "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"
# # Access the token using st.secrets.get('HF_TOKEN')
# # hf_token = st.secrets.get('HF_TOKEN')
# # if not hf_token:
# #     st.error("Hugging Face token not found. Please add it to your Streamlit secrets.")
# #     st.stop() # Stop execution if token is not found
# 
# 
# # Load zero-shot classifier
# @st.cache_resource
# def load_classifier(token):
#     return pipeline("zero-shot-classification", model="facebook/bart-large-mnli", token=token, device='cpu')
# 
# classifier = load_classifier(hf_token)
# 
# # Define classification labels
# narrative_rhetoric_labels = ['Neutral or Everyday Event |: Article describes ordinary events such as business openings, cultural celebrations, or routine community updates without political, ideological, or conflict-driven framing, The city’s annual music festival drew thousands of attendees, celebrating local talent and community spirit, A local bakery opened its doors this week, offering fresh bread and pastries to the neighborhood.',
#     'Unclear or Minimal Rhetoric | : Article lacks enough information to determine a strong persuasive or ideological framing. Statements are mostly factual or ambiguous without clear narrative intent, Authorities have not confirmed the source of the unusual sounds reported near the harbor,Officials have released few details about the recent outage, leaving the cause uncertain' ,
#     'Us vs Them |: Frames one group as morally superior and the other as dangerous, inferior or untrustworthy, Foreign powers are undermining our sovereignty, threatening our very way of life, Our nation faces an existential threat from foreign corporations trying to dictate our economy,',
#     'Exceptionalism | : Claims a nation or group is unique, morally superior, or destined for a special role in the world. Our nation is destined to lead the world into a new era of progress and enlightenment, Only our people have the vision and moral courage to guide the world out of crisis',
#     'Security Threat Inflation |: Exaggerates or amplifies the scale of a threat to justify urgent or extreme action, Authorities warn that the recent cyberattacks are only the beginning of more severe threats to come, President cited ‘national security’ concerns as a reason for the import tax hike, The actions of the a countrys Federation continue to pose a threat to another countrys security ',
#     'Humanitarian Pretext |: Presents intervention or policy as purely altruistic and compassionate, masking strategic goals. Our intervention is purely for humanitarian purposes — to save lives and protected the innocent. Military presence in the region is necessary to protect innocent civilians from further harm, A countrys continued military actions in another country constituted a national emergency',
#     'Moral Panic or Outrage |: Focuses on moral or ethical violations to spark strong emotional reactions in the public.Parents are outraged after a controversial new book was introduced into the school curriculum. Community leaders are demanding an immediate ban on the controversial artwork that has shocked the public. Leader slaps 50 percent tariff on one countrys goods over imports of other countrys oil',
#     'Victimhood or Persecution | Narrative: Portrays own group as unfairly targeted, oppressed, or under attack.We have been oppressed and silenced for decades, yet we continue to fight for justice. Our culture has been systematically targeted and erased from public life.One country punished while other importers not targeted',
#     'Destiny & Progress |: Frames events as part of inevitable historical progress or being on the right side of history, This breakthrough is part of humanity’s unstoppable march toward a brighter tomorrow, This infrastructure project marks the beginning of a new era of prosperity for our nation',
#     'Unity Against a Common Enemy |: Calls for cohesion and solidarity by identifying and opposing a shared adversary.We must stand together to protect our community from those who wish to destroy it, If we do not unite now, our adversaries will succeed in dismantling everything we have built together.']
# 
# appeal_type_labels = [
#     'Pathos | Emotional appeal: targets fear, pride, anger, compassion, hope, justice, jealousy, love, patriotism, pity, sympathy, vivid language,  eg: our way of life is under threat, Foreign powers are undermining our sovereignty, threatening our very way of life, Authorities warn that the recent cyberattacks are only the beginning of more severe threats to come,Our intervention is purely for humanitarian purposes — to save lives and protected the innocent, Parents are outraged after a controversial new book was introduced into the school curriculum, We have been oppressed and silenced for decades, yet we continue to fight for justice. Our nation faces an existential threat from foreign corporations trying to dictate our economy. If we do not unite now, our adversaries will succeed in dismantling everything we have built together' ,
#     'Logos | Logical/ pragmatic appeal: uses statistics, facts, rational arguments, reason, evidence, logic, anecdotes, case studies, analogies, comparisons, cause and effect, proof, eg: data shows crime has doubled, A local bakery opened its doors this week, Officials have released few details about the recent outage, leaving the cause uncertain. ' ,
#     'Ethos | Credibility appeal: leans on authority, moral standing, expertise, impartiality, confidence in delivery, honesty, fairness, reliability, trustworthy, educated, cites credible sources, reputation, President cited ‘national security’ concerns as a reason for the import tax hike, '
# ]
# 
# target_audience_labels = [
#     "Nationalists or Patriots |: Citizens who value national pride, sovereignty, and cultural identity: Exceptionalism, Us vs Them, Unity Against a Common Enemy",
#     "Security‑Conscious Citizens |: People prioritizing public safety, stability, and protection from threats: Security Threat Inflation, Us vs Them",
#     "Humanitarians or Compassionate Public |: Individuals motivated by empathy, fairness, and human rights concerns: Humanitarian Pretext, Victimhood Narratives",
#     "Progress‑Oriented Groups |: People inspired by innovation, reform, and long‑term vision: Destiny & Progress, Innovation Narratives",
#     "Culturally Conservative Groups |: Communities seeking to preserve traditional values, customs, or religion: Cultural Preservation, Identity Appeals",
#     "Economically Concerned Citizens |: Those focused on job security, trade, and financial wellbeing: Economic Threat, Prosperity Narratives",
#     "Political Activists or Partisans |: Citizens aligned strongly with a political ideology or movement: Moral Panic / Outrage, Us vs Them",
#     "Internationally Minded Citizens |: People engaged with global cooperation, diplomacy, or multiculturalism: Humanitarian, Progress, Cooperative Narratives"
# ]
# 
# def analyze_article_and_summarize(url, classifier):
#     """Fetches article, performs classifications, and returns a summary."""
# 
#     try:
#         article = Article(url)
#         article.download()
#         article.parse()
#         text = article.text.strip()
#     except Exception as e:
#         return {"error": f"Error fetching article: {e}"}
# 
#     if not text:
#         return {"error": "Could not extract text from article."}
# 
#     # Classify narrative rhetoric
#     narrative_rhetoric_results = classifier(text, narrative_rhetoric_labels, multi_label=True)
#     # Get top 3 narrative rhetoric labels and scores, extracting label name before '|'
#     top_3_narrative = sorted(zip(narrative_rhetoric_results['labels'], narrative_rhetoric_results['scores']), key=lambda x: x[1], reverse=True)[:3]
#     top_3_narrative_formatted = [(label.split(' |')[0], score) for label, score in top_3_narrative]
# 
# 
#     # Classify appeal type
#     appeal_type_results = classifier(text, appeal_type_labels, multi_label=True)
#     # Get top 3 appeal type labels and scores, extracting label name before '|'
#     top_3_appeal = sorted(zip(appeal_type_results['labels'], appeal_type_results['scores']), key=lambda x: x[1], reverse=True)[:3]
#     top_3_appeal_formatted = [(label.split(' |')[0], score) for label, score in top_3_appeal]
# 
# 
#     # Classify target audience
#     target_audience_results = classifier(text, target_audience_labels, multi_label=True)
#     # Get top 3 target audience labels and scores, extracting label name before '|'
#     top_3_target_audience = sorted(zip(target_audience_results['labels'], target_audience_results['scores']), key=lambda x: x[1], reverse=True)[:3]
#     top_3_target_audience_formatted = [(label.split(' |')[0], score) for label, score in top_3_target_audience]
# 
# 
#     return {
#         "text": text,
#         "top_3_narrative_rhetoric": top_3_narrative_formatted,
#         "top_3_appeal_type": top_3_appeal_formatted,
#         "top_3_target_audience": top_3_target_audience_formatted,
#         "narrative_rhetoric_all": narrative_rhetoric_results,
#         "appeal_type_all": appeal_type_results,
#         "target_audience_all": target_audience_results
#     }
# 
# def main():
#     st.sidebar.title("Navigation")
#     page = st.sidebar.radio("Go to", ["Home", "Rhetoric Detection", "Popular Rhetoric Timeline", "About"])
# 
#     st.title("NarrAItives")
# 
#     if page == "Home":
#         home_page()
#     elif page == "Rhetoric Detection":
#         rhetoric_detection_page()
#     elif page == "Popular Rhetoric Timeline":
#         popular_rhetoric_timeline_page()
#     elif page == "About":
#         about_page()
# 
# def home_page():
#     st.header("uncover the patterns shaping your world")
#     st.write("Welcome to NarrAItives! This application helps you analyze news articles to understand the underlying rhetoric and identify potential target audiences.")
#     st.write("Use the navigation on the left to explore different features of the app.")
#     # Add any other content for the home page here
# 
# def rhetoric_detection_page():
#     st.header("don't just read the news - read between the lines")
#     st.write("Analyze the rhetoric used in a news article by entering its URL.")
# 
#     url = st.text_input("Enter the URL of a news article:")
# 
#     if url:
#         with st.spinner("Analyzing article..."):
#             analysis_results = analyze_article_and_summarize(url, classifier)
# 
#         if "error" in analysis_results:
#             st.error(analysis_results["error"])
#         else:
#             st.subheader("Article Text:")
#             st.text_area("Article Content", analysis_results["text"], height=300)
# 
#             st.subheader("Analysis Summary:")
#             narrative_rhetoric_summary = ", ".join([label for label, score in analysis_results['top_3_narrative_rhetoric']])
#             appeal_type_summary = analysis_results['top_3_appeal_type'][0][0] if analysis_results['top_3_appeal_type'] else "an unclear"
#             target_audience_summary = " and ".join([label for label, score in analysis_results['top_3_target_audience'][:2]])
# 
#             st.write(f"This article primarily uses {narrative_rhetoric_summary} framing, appealing mainly to {appeal_type_summary} appeal, aimed at {target_audience_summary}.")
# 
#             st.subheader("Classification Scores:")
# 
#             # Combine all classification results for plotting
#             all_labels = [label.split(' |')[0] for label in narrative_rhetoric_labels] + \
#                          [label.split(' |')[0] for label in appeal_type_labels] + \
#                          [label.split(' |')[0] for label in target_audience_labels]
# 
#             all_scores = analysis_results['narrative_rhetoric_all']['scores'] + \
#                          analysis_results['appeal_type_all']['scores'] + \
#                          analysis_results['target_audience_all']['scores']
# 
#             results_df = pd.DataFrame({
#                 'Label': all_labels,
#                 'Score': all_scores,
#                 'Category': ['Narrative Rhetoric'] * len(narrative_rhetoric_labels) +
#                             ['Appeal Type'] * len(appeal_type_labels) +
#                             ['Target Audience'] * len(target_audience_labels)
#             })
# 
#             # Sort by score
#             results_df = results_df.sort_values(by='Score', ascending=False)
# 
#             fig, ax = plt.subplots(figsize=(10, 15)) # Increased figure height
#             colors = {'Narrative Rhetoric': 'skyblue', 'Appeal Type': 'lightgreen', 'Target Audience': 'salmon'}
# 
#             # Plot each category separately to control colors
#             for category, color in colors.items():
#                 category_df = results_df[results_df['Category'] == category]
#                 ax.barh(category_df['Label'], category_df['Score'], color=color, label=category)
# 
# 
#             ax.set_xlabel('Score')
#             ax.set_title('Classification Scores by Category')
#             ax.invert_yaxis() # To show the highest score at the top
#             ax.legend()
# 
#             # Add the score values as text labels on the bars
#             for bar in ax.patches:
#                 width = bar.get_width()
#                 ax.text(width + 0.01, bar.get_y() + bar.get_height()/2, f'{width:.2f}', ha='left', va='center')
# 
# 
#             st.pyplot(fig)
# 
# 
# def popular_rhetoric_timeline_page():
#     st.header("the story behind the story")
#     st.write("Explore the trends of popular rhetoric over time.")
#     # Add the timeline visualization here
# 
# def about_page():
#     st.header("The media tells stories. We tell you why.")
#     st.write("Learn more about the NarrAItives project and the team behind it.")
#     # Add information about the project here
# 
# if __name__ == "__main__":
#     main()